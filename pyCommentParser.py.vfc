;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : pyCommentParser.py.vfc
;  File Date : 11:13:19 AM - 22:Apr:2025

event(import ast);// 
event(import os);// 
event(import sys);// 
event(import re);// 
event(from typing import List, Dict, Set, Optional, Tuple, Any);// 
event(from collections import defaultdict);// 

input(class CompleteStructureCommenter:);// beginclass
set("""A more robust Python structure commenter that handles multi-block endings.""");//
branch();//
path();//
path();//

input(def __init__(self):);// beginmethod
set(self.source_lines = []);// 
set(self.result_lines = []);// 
set(self.begin_comments = {});//  Line -> [comments]
set(self.end_comments = defaultdict(list));//  Line -> [(comment, indentation, start_line)]
end();// endmethod

input(def add_comments(self, filename: str, output_filename: Optional[str] = None) -> str:);// beginmethod
set("""Add structural comments to a Python file.""");//
set();//  Read the file
branch(with open(filename, 'r', encoding='utf-8') as f:);// beginwith
path();//
set(content = f.read());// 
bend();// endwith
set(return self.add_comments_to_string(content, output_filename));// 
end();// endmethod

input(def add_comments_to_string(self, content: str, output_filename: Optional[str] = None) -> str:);// beginmethod
set("""Add structural comments to a Python string.""");//
set();//  Parse the content
set(self.source_lines = content.splitlines());// 
set();//  Parse the AST, first clean up content with special characters
branch(try:);// begintry
path();//
set();//  Replace asterisks in identifiers for AST parsing only
set(clean_content = re.sub(r'\*([a-zA-Z0-9_]+)\*', r'\1', content));// 
set(tree = ast.parse(clean_content));// 
path(except SyntaxError as e:);// 
set(print(f"Syntax error in input file: {e}"));// 
set(return content);// 
bend();// endtry
set();//  First pass: collect all the begin/end comments
set(self._collect_comments(tree));// 
set();//  Second pass: apply the comments to the source lines
set(self._apply_comments());// 
set();//  Create the modified content
set(modified_content = '\n'.join(self.result_lines));// 
set();//  Write to output file if provided
branch(if output_filename:);// beginif
path();//
branch(with open(output_filename, 'w', encoding='utf-8') as f:);// beginwith
path();//
set(f.write(modified_content));// 
bend();// endwith
bend();// endif
set(return modified_content);// 
end();// endmethod

input(def _get_indent(self, line_idx: int) -> str:);// beginmethod
set("""Get the indentation of a line.""");//
branch(if line_idx < 0 or line_idx >= len(self.source_lines):);// beginif
path();//
set(return "");// 
bend();// endif
set(line = self.source_lines[line_idx]);// 
set(return line[:len(line) - len(line.lstrip())]);// 
end();// endmethod

input(def _collect_comments_for_node(self, node, node_type, begin_comment, end_comment):);// beginmethod
set("""Collect begin and end comments for a specific node.""");//
branch(if not hasattr(node, 'lineno') or not hasattr(node, 'end_lineno'):);// beginif
path();//
set(return);// 
bend();// endif
set(start_line = node.lineno - 1);// 
set(end_line = node.end_lineno - 1);// 
set(indent = self._get_indent(start_line));// 
set();//  Add begin comment
branch(if start_line not in self.begin_comments:);// beginif
path();//
set(self.begin_comments[start_line] = []);// 
bend();// endif
set(self.begin_comments[start_line].append(begin_comment));// 
set();//  Add end comment - store as (comment, indentation, start_line)
set();//  The start_line is used for sorting end comments when multiple blocks end on the same line
set(self.end_comments[end_line].append((end_comment, indent, start_line)));// 
end();// endmethod

input(def _collect_comments(self, tree):);// beginmethod
set("""First pass: collect all the begin/end comments.""");//
set();//  Clear previous comments
set(self.begin_comments = {});// 
set(self.end_comments = defaultdict(list));// 
set();//  Build a mapping of nodes to their parent
set(parent_map = {});// 
loop(for parent in ast.walk(tree):);// beginfor
loop(for child in ast.iter_child_nodes(parent):);// beginfor
set(parent_map[child] = parent);// 
lend();// endfor
lend();// endfor
set();//  Collect comments from all nodes in AST order
loop(for node in ast.walk(tree):);// beginfor
set();//  Function definitions
branch(if isinstance(node, ast.FunctionDef):);// beginif
path();//
set();//  Check if this is a method inside a class
set(parent = parent_map.get(node));// 
branch(if parent and isinstance(parent, ast.ClassDef):);// beginif
path();//
set(self._collect_comments_for_node(node, "method", "#beginmethod", "#endmethod"));// 
path(else:);// 
set(self._collect_comments_for_node(node, "function", "#beginfunc", "#endfunc"));// 
bend();// endif
set();//  Class definitions
path(elif isinstance(node, ast.ClassDef):);// beginelif
set(self._collect_comments_for_node(node, "class", "#beginclass", "#endclass"));// 
set();//  If statements
path(elif isinstance(node, ast.If):);// beginelif
set();//  Check if this is an elif by examining the source line
set(start_line = node.lineno - 1);// 
branch(if start_line < len(self.source_lines):);// beginif
path();//
set(line = self.source_lines[start_line].strip());// 
branch(if line.startswith("elif "):);// beginif
path();//
set(self._collect_comments_for_node(node, "elif", "#beginelif", "#endlif"));// 
path(else:);// 
set(self._collect_comments_for_node(node, "if", "#beginif", "#endif"));// 
bend();// endif
path(else:);// 
set();//  Fallback if we can't determine
set(self._collect_comments_for_node(node, "if", "#beginif", "#endif"));// 
bend();// endif
set();//  For loops
path(elif isinstance(node, ast.For):);// beginelif
set(self._collect_comments_for_node(node, "for", "#beginfor", "#endfor"));// 
set();//  While loops
path(elif isinstance(node, ast.While):);// beginelif
set(self._collect_comments_for_node(node, "while", "#beginwhile", "#endwhile"));// 
set();//  With statements
path(elif isinstance(node, ast.With):);// beginelif
set(self._collect_comments_for_node(node, "with", "#beginwith", "#endwith"));// 
set();//  Try-except blocks
path(elif isinstance(node, ast.Try):);// beginelif
set(self._collect_comments_for_node(node, "try", "#begintry", "#endtry"));// 
set();// endlif
set();// endlif
set();// endlif
set();// endlif
set();// endlif
set();// endlif
bend();// endif
lend();// endfor
end();// endmethod

input(def _should_skip_comment(self, line, comment_tag):);// beginmethod
set(""");//
set(Check if we should skip adding a comment because it's already in the line,);// 
set(but make sure we don't skip if it's only inside a string literal.);// 
set(""");//
branch(if comment_tag not in line:);// beginif
path();//
set(return False);//  Not in line at all, don't skip
bend();// endif
set();//  Identify positions of string literals in the line
set(str_positions = []);// 
set();//  Find double-quoted strings
loop(for match in re.finditer(r'"[^"\\]*(?:\\.[^"\\]*)*"', line):);// beginfor
set(str_positions.append((match.start(), match.end())));// 
lend();// endfor
set();//  Find single-quoted strings
loop(for match in re.finditer(r"'[^'\\]*(?:\\.[^'\\]*)*'", line):);// beginfor
set(str_positions.append((match.start(), match.end())));// 
lend();// endfor
set();//  Find all occurrences of the comment tag
loop(for match in re.finditer(re.escape(comment_tag), line):);// beginfor
set(tag_start = match.start());// 
set(tag_end = match.end());// 
set();//  Check if this occurrence is inside any string literal
set(inside_string = False);// 
loop(for str_start, str_end in str_positions:);// beginfor
branch(if str_start <= tag_start and tag_end <= str_end:);// beginif
path();//
set(inside_string = True);// 
set(break);// 
bend();// endif
lend();// endfor
branch(if not inside_string:);// beginif
path();//
set(return True);//  Found a real comment outside string literals, skip adding
bend();// endif
lend();// endfor
set(return False);//  All instances were inside string literals, don't skip
end();// endmethod

input(def _apply_comments(self):);// beginmethod
set("""Second pass: apply the comments to the source lines.""");//
set(self.result_lines = []);// 
set();//  Process each line
loop(for i, line in enumerate(self.source_lines):);// beginfor
set();//  First add the original line (possibly with begin comments)
branch(if i in self.begin_comments:);// beginif
path();//
set();//  Need to add begin comments
set(begin_comments = self.begin_comments[i]);// 
set();//  Check if line already has a comment
branch(if '#' in line and not line.strip().startswith('#'):);// beginif
path();//
set();//  Check if any of our begin comments already exist in the line outside string literals
set(should_skip = any(self._should_skip_comment(line, comment) for comment in begin_comments));// 
branch(if should_skip:);// beginif
path();//
set();//  If real comments exist, parse out existing comment
set(comment_pos = line.find('#'));// 
set(code_part = line[:comment_pos].rstrip());// 
set(existing_comment = line[comment_pos:]);// 
set();//  Add our begin comments before the existing comment
set(begin_comment_str = " ".join(begin_comments));// 
set(modified = f"{code_part} {begin_comment_str} {existing_comment}");// 
set(self.result_lines.append(modified));// 
path(else:);// 
set();//  No existing structure comments (or only in string literals)
set(begin_comment_str = " ".join(begin_comments));// 
set(self.result_lines.append(f"{line} {begin_comment_str}"));// 
bend();// endif
path(else:);// 
set();//  No existing comment, add to end
set(begin_comment_str = " ".join(begin_comments));// 
set(self.result_lines.append(f"{line} {begin_comment_str}"));// 
bend();// endif
path(else:);// 
set();//  No begin comment to add
set(self.result_lines.append(line));// 
bend();// endif
set();//  Then check if we need to add end comments after this line
branch(if i in self.end_comments:);// beginif
path();//
set();//  Sort end comments by their start line - this ensures proper nesting
set();//  Blocks that started later (higher start_line) should be closed first
set(sorted_end_comments = sorted();// 
set(self.end_comments[i],);// 
set(key=lambda x: x[2],);//  Sort by start_line
set(reverse=True);//  Later blocks should be closed first
set());// 
set();//  Add each end comment on its own line
loop(for end_comment, indent, _ in sorted_end_comments:);// beginfor
set(self.result_lines.append(f"{indent}{end_comment}"));// 
lend();// endfor
bend();// endif
lend();// endfor
end();// endmethod
bend();//
end();// endclass
set();//  Extended lists to include the new endif/endlif distinction
set(Ends = [);// 
set("endfunc",);// 
set("endmethod",);// 
set("endclass",);// 
set("endif",);// 
set(#"endlif",  # Added for elif statements);// 0,  # Added for elif statements
set("endwith",);// 
set("endtry",);// 
set("endfor",);// 
set("endwhile",);// 
set(]);// 
set(Begins = [);// 
set("beginfunc",);// 
set("beginmethod",);// 
set("beginclass",);// 
set("beginif",);// 
set("beginelif",);//  Added for elif statements
set("begintry",);// 
set("beginwith",);// 
set("beginwhile",);// 
set("beginfor",);// 
set(]);// 
set();//  Update the begin_type mapping to include beginelif
set(begin_type = {);// 
set("beginfunc": "input",);// 
set("beginmethod": "input",);// 
set("beginclass": "input",);// 
set("beginif": "branch",);// 
set("beginelif": "branch",);//  Same type as beginif
set("begintry": "branch",);// 
set("beginwith": "branch",);// 
set("beginwhile": "loop",);// 
set("beginfor": "loop",);// 
set(});// 
set();//  Update the end_type mapping to include endlif
set(end_type = {);// 
set("endfunc": "end",);// 
set("endmethod": "end",);// 
set("endclass": "end",);// 
set("endif": "bend",);// 
set(#"endlif": "bend",  # Same type as endif);// 0: 0,  # Same type as endif
set("endwith": "bend",);// 
set("endtry": "bend",);// 
set("endfor": "lend",);// 
set("endwhile": "lend",);// 
set(});// 
set(path_type = [);// 
set("elif",);//  for if
set("else",);//  for if, try, loops
set("except",);//  for try
set("finally",);//  for try
set(]);// 
set(event_type = [);// 
set("import",);// 
set("from",);// 
set(]);// 
set(output_type = [);// 
set("print",);// 
set(".write",);// 
set(]);// 
set(VFCSEPERATOR = ';//');// 

input(def is_path(line: str) -> bool:);// beginfunc
set(""");//
set(Return True if the first word of the given line is one of the path type.);// 
set(""");//
set(parts = line.strip().split(None, 1));// 
branch(if not parts:);// beginif
path();//
set(return False);// 
bend();// endif
branch(if parts[0].strip(" :") in path_type:);// beginif
path();//
set(return True);// 
bend();// endif
end();// endfunc

input(def replace_string_literals(input_string):);// beginfunc
set();//  Regular expression to match both single and double-quoted string literals
set(result = re.sub(r'(["\'])(.*?)(\1)', '0', input_string));//
set(return result);// 
end();// endfunc

input(def split_on_comment(input_string):);// beginfunc
set();//  Regular expression to match the comment outside of quotes
set(match = re.search(r'(?<!")#.*$', temp_str));//
branch(if match:);// beginif
path();//
set(s1 = input_string.strip());//  Everything before the comment
set(s2 = match.strip());//  The comment itself
path(else:);// 
set(s1, s2 = input_string.strip(), "");// 
bend();// endif
set(return (s1, s2));// 
end();// endfunc

input(def split_string(input_string):);// beginfunc
set(temp_str = replace_string_literals(input_string));// 
set(parts = temp_str.split("#", 1)  # Split at the first occurrence of '#');//  Split at the first occurrence of 0
set();// parts = split_on_comment(input_string)
set(s1 = input_string.strip());// 
branch(if len(parts) > 1 :);// beginif
path();//
set(s2 = parts[1]);// 
set(s1 = s1.replace('#'+s2, ""));// 
path(else:);// 
set(s2 = "");//  s2 holds the second part, or remains empty
bend();// endif
set(return (s1, s2));// 
end();// endfunc

input(def get_marker( comment ):);// beginfunc
set(parts = comment.strip().split(None, 1));// 
branch(if not parts:);// beginif
path();//
set(return "none");// 
bend();// endif
set(marker = parts[0]);// 
set(return marker);// 
end();// endfunc

input(def get_VFC_type(code : str, line: str) -> Optional[str]:);// beginfunc
set(""");//
set(If the first word of `line` (without any leading '#') is in Begins or Ends,);// 
set(returns its mapped type; otherwise returns None.);// 
set(""");//
set(token = code.strip().split(None, 1)[0] if len(code) > 1 else "none");// 
branch(if token in event_type:);// beginif
path();//
set(return "event");// 
bend();// endif
branch(if is_path(code):);// beginif
path();//
set(return 'path');// 
bend();// endif
set(parts = line.strip().split(None, 1));// 
branch(if not parts:);// beginif
path();//
set(return "set");// 
bend();// endif
set(marker = parts[0]);// 
branch(if marker in Begins:);// beginif
path();//
set(return begin_type[marker]);// 
bend();// endif
branch(if marker in Ends:);// beginif
path();//
set(return end_type[marker]);// 
bend();// endif
set(return "set");// 
end();// endfunc

input(def generate_VFC(input_string):);// beginfunc
set(strings = input_string.split("\n"));//  Splits the input at each newline
set(VFC = '');// 
loop(for string in strings:);// beginfor
set();//  Skip empty lines
branch(if not string.strip():);// beginif
path();//
set(continue);// 
bend();// endif
set(code, comment = split_string(string));// 
set(code = code.strip());// 
set(type = get_VFC_type(code, comment));// 
set(marker = get_marker( comment ));// 
set(## PRE FIX TOKENS);// # PRE FIX TOKENS 
branch(if marker == "endclass" :);// beginif
path();//
set(VFC += f"bend(){VFCSEPERATOR}\n");// 
bend();// endif
set(VFC += f'{type}({code}){VFCSEPERATOR} {comment}\n');// 
set(## POST FIX TOKENS);// # POST FIX TOKENS 
branch(if type == "branch":);// beginif
path();//
set(VFC += f"path(){VFCSEPERATOR}\n");// 
bend();// endif
branch(if marker == "beginclass" :);// beginif
path();//
set(VFC += f"branch(){VFCSEPERATOR}\n");// 
set(VFC += f"path(){VFCSEPERATOR}\n");// 
set(VFC += f"path(){VFCSEPERATOR}\n");// 
bend();// endif
lend();// endfor
set(return VFC);// 
end();// endfunc

input(def main():);// beginfunc
event(import argparse);// 
set(parser = argparse.ArgumentParser(description='Add structure comments to Python code'));// 
set(parser.add_argument('input_file', help='Input Python file'));// 
set(parser.add_argument('-o', '--output', help='Output file (default: stdout)'));// 
set(args = parser.parse_args());// 
set(commenter = CompleteStructureCommenter());// 
set(modified_code = commenter.add_comments(args.input_file, args.output));// 
set(VFC = generate_VFC(modified_code));// 
branch(with open(args.input_file+'.vfc', 'w') as VFC_output:);// beginwith
path();//
set(VFC_output.write(VFC));// 
bend();// endwith
set(return modified_code);// 
end();// endfunc
branch(if __name__ == '__main__':);// beginif
path();//
set(t = main());// 
bend();// endif



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 6946660 3289650
;    pyCommentParser.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1458 213 1911 1814 7 30   375   87    python.key  0